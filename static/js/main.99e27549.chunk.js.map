{"version":3,"sources":["components/Button.module.css","components/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","s","item","onClick","disabled","name","App","useState","number","setNumber","incDisabled","restDisabled","divCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,KAAO,uB,gKCcVC,EANA,SAACC,GACZ,OACI,wBAAQC,UAAWC,IAAEC,KAAMC,QAASJ,EAAMI,QAASC,SAAYL,EAAMK,SAArE,SAAgFL,EAAMM,QCyB/EC,EA7BH,WAAO,IAAD,EACSC,mBAAS,GADlB,mBACXC,EADW,KACJC,EADI,KAWVC,IAAcF,EAAS,GACvBG,IAAeH,EAAS,GACxBI,EAAYF,EAAa,cAAe,UAI9C,OACE,sBAAKV,UAAW,UAAhB,UACE,qBAAKA,UAAWY,EAAhB,SAA6BJ,IAC7B,sBAAKR,UAAW,aAAhB,UACE,cAAC,EAAD,CAAQG,QAlBY,WACxBK,IACAC,EAAUD,IAgB8BH,KAAM,MAAOD,SAAUM,IAC3D,cAAC,EAAD,CAAQP,QAfS,WACrBM,EAAU,IAc2BJ,KAAM,QAASD,SAAUO,WCfnDE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.99e27549.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Button_item__1Fzeu\"};","import React from 'react';\r\nimport s from '../components/Button.module.css'\r\n\r\ntype ButtonPropsType ={\r\n    onClick:() => void\r\n    name: string\r\n    disabled?: boolean\r\n}\r\n\r\nconst Button = (props:ButtonPropsType) => {\r\n    return (\r\n        <button className={s.item} onClick={props.onClick} disabled = {props.disabled}>{props.name}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { useState } from 'react';\nimport './App.css';\nimport Button from './components/Button';\n\n\n\n\nconst App = () => {\n  let [number,setNumber] = useState(0)\n\n  const onIncClcikHandler = () =>{\n    number++;\n    setNumber(number)\n  }\n  const onResetHandler = () => {\n    setNumber(0)\n  }\n\n  const incDisabled = number < 5? false : true\n  const restDisabled = number > 0? false: true\n  const divCounter= incDisabled? 'red counter': 'counter'\n  \n  \n\n  return (\n    <div className={'wrapper'}>\n      <div className={divCounter}>{number}</div>\n      <div className={'btnWrapper'}>\n        <Button onClick={onIncClcikHandler} name={'inc'} disabled={incDisabled}/>\n        <Button onClick={onResetHandler} name={'reset'} disabled={restDisabled}/>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}