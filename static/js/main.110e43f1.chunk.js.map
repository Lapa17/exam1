{"version":3,"sources":["components/Button.module.css","components/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","s","item","onClick","disabled","name","App","useState","number","setNumber","maxValue","setMaxValue","startValue","setStartValue","editMode","setEditMode","useEffect","startValueAsStr","localStorage","getItem","newStartValue","JSON","parse","maxValueAsStr","newMaxValue","setDisabled","incDisabled","restDisabled","divCounter","spanClass","inputMaxValueClass","inputStartValueClass","spanTitle","value","changeHandler","e","currentTarget","InputClass","setItem","stringify","Input","type","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.110e43f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Button_item__1Fzeu\"};","import React from 'react';\r\nimport s from '../components/Button.module.css'\r\n\r\ntype ButtonPropsType ={\r\n    onClick:() => void\r\n    name: string\r\n    disabled: boolean\r\n}\r\n\r\nconst Button = (props:ButtonPropsType) => {\r\n    return (\r\n        <button className={s.item} onClick={props.onClick} disabled = {props.disabled}>{props.name}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport './App.css';\nimport Button from './components/Button';\n\n\n\n\nconst App = () => {\n  const [number, setNumber] = useState(0)\n  const [maxValue, setMaxValue] = useState(0)\n  const [startValue, setStartValue] = useState(0)\n  const [editMode, setEditMode] = useState<boolean>(false)\n\n\n  useEffect(() => {\n    let startValueAsStr = localStorage.getItem('startValue')\n    if (startValueAsStr) {\n      let newStartValue = JSON.parse(startValueAsStr)\n      setNumber(newStartValue)\n      setStartValue(newStartValue)\n    }\n\n  }, [])\n  useEffect(() => {\n    let maxValueAsStr = localStorage.getItem('maxValue')\n    if (maxValueAsStr) {\n      let newMaxValue = JSON.parse(maxValueAsStr)\n      setMaxValue(newMaxValue)\n    }\n\n  }, [])\n\n\n\n  const onIncClcikHandler = () => setNumber(number + 1)\n  const onResetHandler = () => setNumber(startValue)\n  const onSetHandler = () => {\n    localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    localStorage.setItem('startValue', JSON.stringify(startValue))\n    setNumber(startValue)\n    setEditMode(false)\n  }\n\n\n  const setDisabled = startValue < 0 || maxValue <= startValue || !editMode ? true : false\n  const incDisabled = number < maxValue && editMode === false ? false : true\n  const restDisabled = number > startValue && editMode === false ? false : true\n  const divCounter = incDisabled ? 'red counter' : 'counter'\n  const spanClass = setDisabled ? 'red message' : 'message'\n  const inputMaxValueClass = maxValue <= startValue ? 'redInput input' : 'input'\n  const inputStartValueClass = startValue < 0 || startValue >= maxValue ? 'redInput input' : 'input'\n\n\n  const spanTitle = setDisabled ? 'invalid value!' : \"enter value and press 'set'\"\n\n\n  let onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setMaxValue(JSON.parse(e.currentTarget.value))\n    setEditMode(true)\n  }\n  let onChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setStartValue(JSON.parse(e.currentTarget.value))\n    setEditMode(true)\n  }\n\n\n  return (\n    <div className={'mainWrapper'}>\n      <div className={'wrapper'}>\n        {editMode ?\n          <span className={spanClass}>{spanTitle}</span>\n          : <div className={divCounter}>{number}</div>\n        }\n        <div className={'btnWrapper'}>\n          <Button onClick={onIncClcikHandler} name={'inc'} disabled={incDisabled} />\n          <Button onClick={onResetHandler} name={'reset'} disabled={restDisabled} />\n\n        </div>\n      </div>\n      <div className={'wrapper'}>\n        <div className={'wrapperBorder'}>\n          <div className={'itemWrapper'}>\n            <span>max value:</span>\n            <Input value={maxValue} changeHandler={onChangeMaxValueHandler} InputClass={inputMaxValueClass} />\n          </div>\n          <div className={'itemWrapper'}>\n            <span>start value:</span>\n            <Input value={startValue} changeHandler={onChangeStartValueHandler} InputClass={inputStartValueClass} />\n          </div>\n        </div>\n        <div className={'btnWrapper set'}>\n          <Button onClick={onSetHandler} name={'set'} disabled={setDisabled} />\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\ntype InputPropsType = {\n  value: number\n  changeHandler: (e: ChangeEvent<HTMLInputElement>) => void\n  InputClass: string\n}\n\nconst Input = (props: InputPropsType) => {\n\n  return (\n    <input type=\"number\" value={props.value} onChange={props.changeHandler} className={props.InputClass} />\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}