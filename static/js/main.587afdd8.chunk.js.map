{"version":3,"sources":["components/Button.tsx","components/Input.tsx","state/selectors.ts","state/memory-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx","components/Button.module.css"],"names":["Button","props","className","s","item","onClick","disabled","name","Input","type","value","onChange","changeHandler","InputClass","selectStartValue","state","memory","startValue","selectMaxValue","maxValue","selectCounterValue","counter","SET_START_VALUE","SET_MAX_VALUE","SET_COUNTER_VALUE","initState","setCounterValue","App","useSelector","counterValue","dispatch","useDispatch","useState","editMode","setEditMode","setDisabled","incDisabled","restDisabled","divCounter","spanClass","inputMaxValueClass","inputStartValueClass","spanTitle","e","setMaxValue","JSON","parse","currentTarget","setStartValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.587afdd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from '../components/Button.module.css'\r\n\r\ntype ButtonPropsType ={\r\n    onClick:() => void\r\n    name: string\r\n    disabled: boolean\r\n}\r\n\r\nconst Button = (props:ButtonPropsType) => {\r\n    return (\r\n        <button className={s.item} onClick={props.onClick} disabled = {props.disabled}>{props.name}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import { ChangeEvent } from \"react\";\r\n\r\ntype InputPropsType = {\r\n    value: number\r\n    changeHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    InputClass: string\r\n  }\r\n  \r\n  const Input = (props: InputPropsType) => {\r\n  \r\n    return (\r\n      <input type=\"number\" value={props.value} onChange={props.changeHandler} className={props.InputClass} />\r\n    )\r\n  }\r\n\r\n  export default Input;","import {AppStoreType} from \"./store\";\r\n\r\n\r\nexport const selectStartValue = (state: AppStoreType) => state.memory.startValue\r\nexport const selectMaxValue = (state: AppStoreType) => state.memory.maxValue\r\nexport const selectCounterValue = (state: AppStoreType) => state.memory.counter\r\n\r\n","const SET_START_VALUE = 'SET_START_VALUE'\r\nconst SET_MAX_VALUE = 'SET_MAX_VALUE'\r\nconst SET_COUNTER_VALUE = 'SET_COUNTER_VALUE'\r\n\r\nexport type memoryTypeAction = setStartValueTypeAction | setMaxValueTypeAction | setCounterValueTypeAction\r\n\r\nexport type setStartValueTypeAction = {\r\n    type: typeof SET_START_VALUE\r\n    startValue: number\r\n}\r\n\r\nexport type setMaxValueTypeAction = {\r\n    type: typeof SET_MAX_VALUE\r\n    maxValue: number\r\n}\r\n\r\nexport type setCounterValueTypeAction = {\r\n    type: typeof SET_COUNTER_VALUE\r\n    counter: number\r\n}\r\n\r\n\r\nexport type memoryType = {\r\n    startValue: number\r\n    maxValue: number\r\n    counter: number\r\n}\r\n\r\nconst initState: memoryType = {\r\n    startValue: 0,\r\n    maxValue: 0,\r\n    counter: 0,\r\n};\r\n\r\nexport const memoryReducer = (state = initState, action: memoryTypeAction): memoryType => {\r\n    switch (action.type) {\r\n        case SET_START_VALUE: {\r\n            return {...state, startValue: action.startValue};\r\n        }\r\n        case SET_MAX_VALUE: {\r\n            return {...state, maxValue: action.maxValue};\r\n        }\r\n        case SET_COUNTER_VALUE: {\r\n            return {...state, counter: action.counter};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setStartValue = (startValue: number) => ({type: SET_START_VALUE, startValue}) as const;\r\nexport const setMaxValue = (maxValue: number) => ({type: SET_MAX_VALUE, maxValue}) as const;\r\nexport const setCounterValue = (counter: number) => ({type: SET_COUNTER_VALUE, counter}) as const;","import React, {ChangeEvent, Dispatch, useState} from 'react';\r\nimport './App.css';\r\nimport Button from './components/Button';\r\nimport Input from './components/Input';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCounterValue, selectMaxValue, selectStartValue} from \"./state/selectors\";\r\nimport {memoryTypeAction, setCounterValue, setMaxValue, setStartValue} from \"./state/memory-reducer\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    const startValue = useSelector(selectStartValue)\r\n    const maxValue = useSelector(selectMaxValue)\r\n    const counterValue = useSelector(selectCounterValue)\r\n\r\n    const dispatch = useDispatch<Dispatch<memoryTypeAction>>()\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n\r\n    const onIncClickHandler = () => dispatch(setCounterValue(counterValue + 1))\r\n    const onResetHandler = () => dispatch(setCounterValue(startValue))\r\n    const onSetHandler = () => {\r\n        dispatch(setCounterValue(startValue))\r\n        setEditMode(false)\r\n    }\r\n\r\n\r\n    const setDisabled = startValue < 0 || maxValue <= startValue || !editMode\r\n    const incDisabled = !(counterValue < maxValue && !editMode)\r\n    const restDisabled = !(counterValue > startValue && !editMode)\r\n    const divCounter = incDisabled ? 'red counter' : 'counter'\r\n    const spanClass = setDisabled ? 'red message' : 'message'\r\n    const inputMaxValueClass = maxValue <= startValue ? 'redInput input' : 'input'\r\n    const inputStartValueClass = startValue < 0 || startValue >= maxValue ? 'redInput input' : 'input'\r\n\r\n\r\n    const spanTitle = setDisabled ? 'invalid value!' : \"enter value and press 'set'\"\r\n\r\n\r\n    let onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMaxValue(JSON.parse(e.currentTarget.value)))\r\n        setEditMode(true)\r\n    }\r\n    let onChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setStartValue(JSON.parse(e.currentTarget.value)))\r\n        setEditMode(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={'mainWrapper'}>\r\n            <div className={'wrapper'}>\r\n                {editMode ?\r\n                    <span className={spanClass}>{spanTitle}</span>\r\n                    : <div className={divCounter}>{counterValue}</div>\r\n                }\r\n                <div className={'btnWrapper'}>\r\n                    <Button onClick={onIncClickHandler} name={'inc'} disabled={incDisabled}/>\r\n                    <Button onClick={onResetHandler} name={'reset'} disabled={restDisabled}/>\r\n\r\n                </div>\r\n            </div>\r\n            <div className={'wrapper'}>\r\n                <div className={'wrapperBorder'}>\r\n                    <div className={'itemWrapper'}>\r\n                        <span>max value:</span>\r\n                        <Input value={maxValue} changeHandler={onChangeMaxValueHandler}\r\n                               InputClass={inputMaxValueClass}/>\r\n                    </div>\r\n                    <div className={'itemWrapper'}>\r\n                        <span>start value:</span>\r\n                        <Input value={startValue} changeHandler={onChangeStartValueHandler}\r\n                               InputClass={inputStartValueClass}/>\r\n                    </div>\r\n                </div>\r\n                <div className={'btnWrapper set'}>\r\n                    <Button onClick={onSetHandler} name={'set'} disabled={setDisabled}/>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {memoryReducer} from \"./memory-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    memory: memoryReducer,\r\n})\r\n\r\nconst store = createStore(reducers)\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store // for dev\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Button_item__ga7n0\"};"],"sourceRoot":""}